//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controllers/GameController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameController"",
    ""maps"": [
        {
            ""name"": ""BasButtons"",
            ""id"": ""2b3a5e29-25bf-4f85-ad72-b9fdfa843cca"",
            ""actions"": [
                {
                    ""name"": ""LeftPrimaryPressed"",
                    ""type"": ""Button"",
                    ""id"": ""2640ad18-5f3b-46d0-9618-e3ff44ff764b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftSecondaryPressed"",
                    ""type"": ""Button"",
                    ""id"": ""5f85149c-3154-4722-96fd-e4bcda897790"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightPrimaryPressed"",
                    ""type"": ""Button"",
                    ""id"": ""b537fb68-e862-4048-b8aa-75574faa5f5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSecondaryPressed"",
                    ""type"": ""Button"",
                    ""id"": ""5c396950-1ebc-4c14-bec0-b01c0990893d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""de6f8ef8-9274-443b-8eba-daccec190453"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPrimaryPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e848eba-b3f3-4a65-aba6-7dd512a88e24"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPrimaryPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c5cb8ba-705b-4f6e-a0c2-103226a3151e"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightSecondaryPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dad782e-033a-47f0-897d-3230c6f44757"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftSecondaryPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasButtons
        m_BasButtons = asset.FindActionMap("BasButtons", throwIfNotFound: true);
        m_BasButtons_LeftPrimaryPressed = m_BasButtons.FindAction("LeftPrimaryPressed", throwIfNotFound: true);
        m_BasButtons_LeftSecondaryPressed = m_BasButtons.FindAction("LeftSecondaryPressed", throwIfNotFound: true);
        m_BasButtons_RightPrimaryPressed = m_BasButtons.FindAction("RightPrimaryPressed", throwIfNotFound: true);
        m_BasButtons_RightSecondaryPressed = m_BasButtons.FindAction("RightSecondaryPressed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasButtons
    private readonly InputActionMap m_BasButtons;
    private List<IBasButtonsActions> m_BasButtonsActionsCallbackInterfaces = new List<IBasButtonsActions>();
    private readonly InputAction m_BasButtons_LeftPrimaryPressed;
    private readonly InputAction m_BasButtons_LeftSecondaryPressed;
    private readonly InputAction m_BasButtons_RightPrimaryPressed;
    private readonly InputAction m_BasButtons_RightSecondaryPressed;
    public struct BasButtonsActions
    {
        private @GameController m_Wrapper;
        public BasButtonsActions(@GameController wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPrimaryPressed => m_Wrapper.m_BasButtons_LeftPrimaryPressed;
        public InputAction @LeftSecondaryPressed => m_Wrapper.m_BasButtons_LeftSecondaryPressed;
        public InputAction @RightPrimaryPressed => m_Wrapper.m_BasButtons_RightPrimaryPressed;
        public InputAction @RightSecondaryPressed => m_Wrapper.m_BasButtons_RightSecondaryPressed;
        public InputActionMap Get() { return m_Wrapper.m_BasButtons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasButtonsActions set) { return set.Get(); }
        public void AddCallbacks(IBasButtonsActions instance)
        {
            if (instance == null || m_Wrapper.m_BasButtonsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasButtonsActionsCallbackInterfaces.Add(instance);
            @LeftPrimaryPressed.started += instance.OnLeftPrimaryPressed;
            @LeftPrimaryPressed.performed += instance.OnLeftPrimaryPressed;
            @LeftPrimaryPressed.canceled += instance.OnLeftPrimaryPressed;
            @LeftSecondaryPressed.started += instance.OnLeftSecondaryPressed;
            @LeftSecondaryPressed.performed += instance.OnLeftSecondaryPressed;
            @LeftSecondaryPressed.canceled += instance.OnLeftSecondaryPressed;
            @RightPrimaryPressed.started += instance.OnRightPrimaryPressed;
            @RightPrimaryPressed.performed += instance.OnRightPrimaryPressed;
            @RightPrimaryPressed.canceled += instance.OnRightPrimaryPressed;
            @RightSecondaryPressed.started += instance.OnRightSecondaryPressed;
            @RightSecondaryPressed.performed += instance.OnRightSecondaryPressed;
            @RightSecondaryPressed.canceled += instance.OnRightSecondaryPressed;
        }

        private void UnregisterCallbacks(IBasButtonsActions instance)
        {
            @LeftPrimaryPressed.started -= instance.OnLeftPrimaryPressed;
            @LeftPrimaryPressed.performed -= instance.OnLeftPrimaryPressed;
            @LeftPrimaryPressed.canceled -= instance.OnLeftPrimaryPressed;
            @LeftSecondaryPressed.started -= instance.OnLeftSecondaryPressed;
            @LeftSecondaryPressed.performed -= instance.OnLeftSecondaryPressed;
            @LeftSecondaryPressed.canceled -= instance.OnLeftSecondaryPressed;
            @RightPrimaryPressed.started -= instance.OnRightPrimaryPressed;
            @RightPrimaryPressed.performed -= instance.OnRightPrimaryPressed;
            @RightPrimaryPressed.canceled -= instance.OnRightPrimaryPressed;
            @RightSecondaryPressed.started -= instance.OnRightSecondaryPressed;
            @RightSecondaryPressed.performed -= instance.OnRightSecondaryPressed;
            @RightSecondaryPressed.canceled -= instance.OnRightSecondaryPressed;
        }

        public void RemoveCallbacks(IBasButtonsActions instance)
        {
            if (m_Wrapper.m_BasButtonsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasButtonsActions instance)
        {
            foreach (var item in m_Wrapper.m_BasButtonsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasButtonsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasButtonsActions @BasButtons => new BasButtonsActions(this);
    public interface IBasButtonsActions
    {
        void OnLeftPrimaryPressed(InputAction.CallbackContext context);
        void OnLeftSecondaryPressed(InputAction.CallbackContext context);
        void OnRightPrimaryPressed(InputAction.CallbackContext context);
        void OnRightSecondaryPressed(InputAction.CallbackContext context);
    }
}
